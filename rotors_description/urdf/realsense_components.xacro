<?xml version="1.0"?>

<robot xmlns:xacro="http://ros.org/wiki/xacro">

  <!-- Macro to add a generic odometry sensor. -->
  <xacro:macro name="realsense_odometry_plugin_macro"
    params="
      namespace odometry_sensor_suffix parent_link pose_topic pose_with_covariance_topic
      position_topic transform_topic odometry_topic parent_frame_id child_frame_id
      mass_odometry_sensor measurement_divisor measurement_delay unknown_delay
      noise_normal_position noise_normal_quaternion noise_normal_linear_velocity
      noise_normal_angular_velocity noise_uniform_position
      noise_uniform_quaternion noise_uniform_linear_velocity
      noise_uniform_angular_velocity enable_odometry_map odometry_map
      image_scale *inertia *origin">
    <!-- odometry link -->
    <link name="${namespace}/odometry_sensor${odometry_sensor_suffix}_link">
      <inertial>
        <xacro:insert_block name="inertia" />
        <mass value="${mass_odometry_sensor}" />  <!-- [kg] -->
      </inertial>
    </link>
    <!-- odometry joint -->
    <joint name="${namespace}/odometry_sensor${odometry_sensor_suffix}_joint" type="revolute">
      <parent link="${parent_link}" />
      <xacro:insert_block name="origin" />
      <child link="${namespace}/odometry_sensor${odometry_sensor_suffix}_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>
    <gazebo>
      <plugin filename="librotors_gazebo_odometry_plugin.so" name="odometry_sensor${odometry_sensor_suffix}">
        <linkName>${namespace}/odometry_sensor${odometry_sensor_suffix}_link</linkName>
        <robotNamespace>${namespace}</robotNamespace>
        <poseTopic>${pose_topic}</poseTopic>
        <poseWithCovarianceTopic>${pose_with_covariance_topic}</poseWithCovarianceTopic>
        <positionTopic>${position_topic}</positionTopic>
        <transformTopic>${transform_topic}</transformTopic>
        <odometryTopic>${odometry_topic}</odometryTopic>
        <parentFrameId>${parent_frame_id}</parentFrameId> <!-- Use the scoped link name here. e.g. Model::link. -->
        <childFrameId>${child_frame_id}</childFrameId>
        <measurementDivisor>${measurement_divisor}</measurementDivisor> <!-- only every (seq % measurementDivisor) == 0 measurement is published [int] -->
        <measurementDelay>${measurement_delay}</measurementDelay> <!-- time that measurement gets held back before it's published in [simulation cycles (int)] -->
        <unknownDelay>${unknown_delay}</unknownDelay> <!-- additional delay, that just gets added to the timestamp [s] -->
        <noiseNormalPosition>${noise_normal_position}</noiseNormalPosition> <!-- standard deviation of additive white gaussian noise [m] -->
        <noiseNormalQuaternion>${noise_normal_quaternion}</noiseNormalQuaternion> <!-- standard deviation white gaussian noise [rad]: q_m = q*quaternionFromSmallAngleApproximation(noiseNormalQ) -->
        <noiseNormalLinearVelocity>${noise_normal_linear_velocity}</noiseNormalLinearVelocity> <!-- standard deviation of additive white gaussian noise [m/s] -->
        <noiseNormalAngularVelocity>${noise_normal_angular_velocity}</noiseNormalAngularVelocity> <!-- standard deviation of additive white gaussian noise [rad/s] -->
        <noiseUniformPosition>${noise_uniform_position}</noiseUniformPosition> <!-- symmetric bounds of uniform noise [m] -->
        <noiseUniformQuaternion>${noise_uniform_quaternion}</noiseUniformQuaternion> <!-- symmetric bounds of uniform noise [rad], computation see above -->
        <noiseUniformLinearVelocity>${noise_uniform_linear_velocity}</noiseUniformLinearVelocity> <!-- symmetric bounds of uniform noise [m/s] -->
        <noiseUniformAngularVelocity>${noise_uniform_angular_velocity}</noiseUniformAngularVelocity> <!-- symmetric bounds of uniform noise [rad/s] -->
        <xacro:if value="${enable_odometry_map}">
          <covarianceImage>package://rotors_gazebo/resource/${odometry_map}</covarianceImage> <!-- a bitmap image describing where the sensor works (white), and where not (black) -->
          <covarianceImageScale>${image_scale}</covarianceImageScale> <!-- the scale of the image in the gazebo world, if set to 1.0, 1 pixel in the image corresponds to 1 meter in the world -->
        </xacro:if>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- Macro to add a camera. -->
  <xacro:macro name="realsense_camera_macro"
    params="namespace parent_link camera_suffix frame_rate
      horizontal_fov image_width image_height image_format min_distance
      max_distance noise_mean noise_stddev enable_visual *geometry *origin">
    <link name="${namespace}/camera_${camera_suffix}_link">
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <xacro:insert_block name="geometry" />
        </geometry>
      </collision>
      <xacro:if value="${enable_visual}">
        <visual>
          <origin xyz="0 0 0" rpy="0 ${pi/2} 0" />
          <geometry>
            <xacro:insert_block name="geometry" />
          </geometry>
          <material name="red" />
        </visual>
      </xacro:if>
      <inertial>
        <mass value="1e-5" />
        <origin xyz="0 0 0" rpy="0 0 0" />
        <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
      </inertial>
    </link>
    <joint name="${namespace}/camera_${camera_suffix}_joint" type="fixed">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${namespace}/camera_${camera_suffix}_link" />
    </joint>
    <link name="${namespace}/camera_${camera_suffix}_optical_link" />
    <joint name="${namespace}/camera_${camera_suffix}_optical_joint" type="fixed" >
      <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}" />
      <parent link="${namespace}/camera_${camera_suffix}_link" />
      <child link="${namespace}/camera_${camera_suffix}_optical_link" />
    </joint>
    <gazebo reference="${namespace}/camera_${camera_suffix}_link">
      <sensor type="camera" name="${namespace}_camera_${camera_suffix}">
        <update_rate>${frame_rate}</update_rate>
        <camera name="head">
          <horizontal_fov>${horizontal_fov}</horizontal_fov>
          <image>
            <width>${image_width}</width>
            <height>${image_height}</height>
            <format>${image_format}</format>
          </image>
          <clip>
            <near>${min_distance}</near>
            <far>${max_distance}</far>
          </clip>
          <noise>
            <type>gaussian</type>
            <!-- Noise is sampled independently per pixel on each frame.
                 That pixel's noise value is added to each of its color
                 channels, which at that point lie in the range [0,1]. -->
            <mean>${noise_mean}</mean>
            <stddev>${noise_stddev}</stddev>
          </noise>
        </camera>
        <plugin name="${namespace}_camera_${camera_suffix}_controller" filename="libgazebo_ros_camera.so">
          <robotNamespace>${namespace}</robotNamespace>
          <alwaysOn>true</alwaysOn>
          <updateRate>${frame_rate}</updateRate>
          <cameraName>camera_${camera_suffix}</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>camera_${camera_suffix}_link</frameName>
          <hackBaseline>0.0</hackBaseline>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

  <!-- Camera joint macro - just the joints, links, and collisions for a single
       camera. -->
  <xacro:macro name="realsense_camera_joint_macro"
    params="namespace parent_link camera_suffix enable_visual *origin *geometry" >
    <link name="${namespace}/camera_${camera_suffix}_link">
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <xacro:insert_block name="geometry" />
        </geometry>
      </collision>
      <xacro:if value="${enable_visual}">
        <visual>
          <origin xyz="0 0 0" rpy="0 0 0" />
          <geometry>
            <xacro:insert_block name="geometry" />
          </geometry>
          <material name="red" />
        </visual>
      </xacro:if>
      <inertial>
        <mass value="1e-5" />
        <origin xyz="0 0 0" rpy="0 0 0" />
        <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
      </inertial>
    </link>
    <joint name="${namespace}/camera_${camera_suffix}_joint" type="fixed">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${namespace}/camera_${camera_suffix}_link" />
    </joint>
  </xacro:macro>


  <!-- Camera sensor macro - just image parameters. -->
  <xacro:macro name="realsense_camera_sensor_macro"
    params="camera_suffix horizontal_fov image_width image_height
      image_format min_distance max_distance noise_mean noise_stddev
      baseline" >
    <camera name="${camera_suffix}">
      <pose>0 ${-baseline} 0 0 0 0</pose>
      <horizontal_fov>${horizontal_fov}</horizontal_fov>
      <image>
        <width>${image_width}</width>
        <height>${image_height}</height>
        <format>${image_format}</format>
      </image>
      <clip>
        <near>${min_distance}</near>
        <far>${max_distance}</far>
      </clip>
      <noise>
        <type>gaussian</type>
        <!-- Noise is sampled independently per pixel on each frame.
             That pixel's noise value is added to each of its color
             channels, which at that point lie in the range [0,1]. -->
        <mean>${noise_mean}</mean>
        <stddev>${noise_stddev}</stddev>
      </noise>
    </camera>
  </xacro:macro>

  <!-- Macro to add a multicamera (stereo pair). -->
  <xacro:macro name="realsense_stereo_camera_macro"
    params="namespace camera_name parent_link frame_rate
      horizontal_fov image_width image_height image_format min_distance
      max_distance noise_mean noise_stddev enable_visual origin_offset_x
      baseline_y origin_offset_z *geometry">
    <!-- These are parameters for the left camera link and then the right
        as well. -->
    <xacro:realsense_camera_joint_macro namespace="${namespace}"
      parent_link="${parent_link}"
      camera_suffix="left" enable_visual="${enable_visual}">
      <origin xyz="${origin_offset_x} ${baseline_y/2} ${origin_offset_z}" rpy="0 0 0" />
      <xacro:insert_block name="geometry" />
    </xacro:realsense_camera_joint_macro>
    <xacro:realsense_camera_joint_macro namespace="${namespace}"
      parent_link="${parent_link}"
      camera_suffix="right" enable_visual="${enable_visual}">
      <origin xyz="${origin_offset_x} ${-baseline_y/2} ${origin_offset_z}" rpy="0 0 0" />
      <xacro:insert_block name="geometry" />
    </xacro:realsense_camera_joint_macro>

    <link name="${namespace}/camera_left_optical_link" />
    <joint name="${namespace}/camera_left_optical_joint" type="fixed" >
      <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}" />
      <parent link="${namespace}/camera_left_link" />
      <child link="${namespace}/camera_left_optical_link" />
    </joint>

    <!-- Both cameras in the pair are anchored off the left camera frame. -->
    <gazebo reference="${namespace}/camera_left_link">
      <sensor type="multicamera" name="${namespace}_stereo_camera">
        <update_rate>${frame_rate}</update_rate>

        <!-- Here we set up the individual cameras of the stereo head. -->
        <xacro:realsense_camera_sensor_macro camera_suffix="left"
            horizontal_fov="${horizontal_fov}" image_width="${image_width}"
            image_height="${image_height}" image_format="${image_format}"
            min_distance="${min_distance}" max_distance="${max_distance}"
            noise_mean="${noise_mean}" noise_stddev="${noise_stddev}"
            baseline="0">
        </xacro:realsense_camera_sensor_macro>

        <xacro:realsense_camera_sensor_macro camera_suffix="right"
            horizontal_fov="${horizontal_fov}" image_width="${image_width}"
            image_height="${image_height}" image_format="${image_format}"
            min_distance="${min_distance}" max_distance="${max_distance}"
            noise_mean="${noise_mean}" noise_stddev="${noise_stddev}"
            baseline="${baseline_y}">
        </xacro:realsense_camera_sensor_macro>

        <!-- Stereo controller, setting the transforms between the two cameras. -->
        <plugin name="${namespace}_stereo_camera_controller" filename="libgazebo_ros_multicamera.so">
          <alwaysOn>true</alwaysOn>
          <updateRate>0.0</updateRate>
          <cameraName>${camera_name}</cameraName>
          <imageTopicName>image_raw</imageTopicName>
          <cameraInfoTopicName>camera_info</cameraInfoTopicName>
          <frameName>${camera_name}/camera_left_link</frameName>
          <hackBaseline>${baseline_y}</hackBaseline>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

  <!-- Realsense sensor macros -->
  <!-- Macro to add a Realsense sensor -->
  <xacro:macro name="realsense_sensor_camera_macro"
    params="namespace parent_link camera_suffix frame_rate *origin">
    <xacro:realsense_camera_macro
      namespace="${namespace}"
      parent_link="${parent_link}"
      camera_suffix="${camera_suffix}"
      frame_rate="${frame_rate}"
      horizontal_fov="1.3962634"
      image_width="752"
      image_height="480"
      image_format="L8"
      min_distance="0.02"
      max_distance="30"
      noise_mean="0.0"
      noise_stddev="0.007"
      enable_visual="true">
      <!--mesh filename="package://rotors_description/meshes/realsense.dae" scale="1 1 1" /-->
      <xacro:insert_block name="origin" />
    </xacro:realsense_camera_macro>
  </xacro:macro>

  <!-- Macro to add a VI-sensor stereo camera. -->
  <xacro:macro name="realsense_sensor_stereo_camera_macro"
    params="namespace parent_link frame_rate origin_offset_x baseline_y origin_offset_z max_range">
    <xacro:realsense_stereo_camera_macro
      namespace="${namespace}"
      camera_name="realsense_sensor"
      parent_link="${parent_link}"
      frame_rate="${frame_rate}"
      horizontal_fov="1.3962634"
      image_width="752"
      image_height="480"
      image_format="L8"
      min_distance="0.02"
      max_distance="${max_range}"
      noise_mean="0.0"
      noise_stddev="0.007"
      enable_visual="false"
      origin_offset_x="${origin_offset_x}"
      baseline_y="${baseline_y}"
      origin_offset_z="${origin_offset_z}" >
      <cylinder length="0.01" radius="0.007" />
    </xacro:realsense_stereo_camera_macro>
  </xacro:macro>

  <!-- Macro to add a depth camera on the VI-sensor. -->
  <xacro:macro name="realsense_depth_macro"
    params="namespace parent_link camera_suffix frame_rate max_range *origin">
    <link name="${namespace}/camera_${camera_suffix}_link">
      <collision>
        <origin xyz="0 0 0" rpy="0 0 0" />
        <geometry>
          <cylinder length="0.01" radius="0.007" />
        </geometry>
      </collision>
      <inertial>
        <mass value="1e-5" />
        <origin xyz="0 0 0" rpy="0 0 0" />
        <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
      </inertial>
    </link>
    <joint name="${namespace}/camera_${camera_suffix}_joint" type="fixed">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${namespace}/camera_${camera_suffix}_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>
    <!-- Optical center of camera -->
    <link name="${namespace}/camera_${camera_suffix}_optical_center_link" />
    <joint name="${namespace}/camera_${camera_suffix}_optical_center_joint" type="fixed">
      <origin xyz="0 0 0" rpy="${-pi/2} 0 ${-pi/2}" />
      <parent link="${namespace}/camera_${camera_suffix}_link" />
      <child link="${namespace}/camera_${camera_suffix}_optical_center_link" />
      <limit upper="0" lower="0" effort="0" velocity="0" />
    </joint>
    <gazebo reference="${namespace}/camera_${camera_suffix}_link">
      <sensor type="depth" name="${namespace}_camera_{camera_suffix}">
        <always_on>true</always_on>
        <update_rate>${frame_rate}</update_rate>
        <camera>
          <horizontal_fov>2</horizontal_fov>
          <image>
            <format>L8</format>
            <width>640</width>
            <height>480</height>
          </image>
          <clip>
            <near>0.01</near>
            <far>${max_range}</far>
          </clip>
        </camera>
        <plugin name="${namespace}_camera_{camera_suffix}" filename="libgazebo_ros_openni_kinect.so">
          <robotNamespace>${namespace}</robotNamespace>
          <alwaysOn>true</alwaysOn>
          <baseline>0.11</baseline>
          <updateRate>${frame_rate}</updateRate>
          <cameraName>camera_${camera_suffix}</cameraName>
          <imageTopicName>camera/image_raw</imageTopicName>
          <cameraInfoTopicName>camera/camera_info</cameraInfoTopicName>
          <depthImageTopicName>depth/disparity</depthImageTopicName>
          <depthImageCameraInfoTopicName>depth/camera_info</depthImageCameraInfoTopicName>
          <pointCloudTopicName>depth/points</pointCloudTopicName>
          <frameName>camera_${camera_suffix}_optical_center_link</frameName>
          <pointCloudCutoff>0.5</pointCloudCutoff>
          <pointCloudCutoffMax>${max_range}</pointCloudCutoffMax>
          <distortionK1>0.0</distortionK1>
          <distortionK2>0.0</distortionK2>
          <distortionK3>0.0</distortionK3>
          <distortionT1>0.0</distortionT1>
          <distortionT2>0.0</distortionT2>
        </plugin>
      </sensor>
    </gazebo>
  </xacro:macro>

  <!-- Realsense camera macro -->
  <xacro:macro name="realsense_sensor_macro" params="namespace parent_link enable_cameras enable_depth enable_ground_truth *origin">
    <!-- Realsense camera link -->

  <link name="${namespace}/realsense_camera_link">
	<inertial>
	<mass value="0.0615752"/>
	<origin rpy="0 0 0" xyz="0 0 0.015"/>
	<inertia ixx="9.108e-05" ixy="0" ixz="0" iyy="2.51e-06" iyz="0" izz="8.931e-05"/>
	</inertial>

	<collision name="realsense_camera_collision">
	<origin rpy="0 0 0" xyz="0 0 0.015"/>
	<geometry>
	<box size="0.0078 0.130 0.0192"/>
	</geometry>
	</collision>

	<visual name="realsense_camera_visual">
	<origin rpy="0 0 0" xyz="0 0 0.015"/>
	<geometry>
	<mesh filename="package://rotors_description/meshes/realsense.dae" scale="1.0 1.0 1.0"/>
	</geometry>
	</visual>
  </link>
  <joint name="{namespace}_realsense_camera_joint" type="fixed">
      <xacro:insert_block name="origin" />
      <parent link="${parent_link}" />
      <child link="${namespace}/realsense_camera_link" />
  </joint>

    <!-- Stereo cameras -->
    <xacro:if value="${enable_cameras}">
      <!-- Insert stereo pair. -->
      <xacro:realsense_sensor_stereo_camera_macro
        namespace="${namespace}" parent_link="${namespace}/realsense_camera_link"
        frame_rate="30.0" origin_offset_x="0.015" baseline_y="${0.055*2}"
        origin_offset_z="0.0065" max_range="30.0">
      </xacro:realsense_sensor_stereo_camera_macro>
    </xacro:if>

    <!-- Depth sensor -->
    <xacro:if value="${enable_depth}">
      <xacro:realsense_depth_macro
        namespace="${namespace}" parent_link="${namespace}/realsense_camera_link"
        camera_suffix="depth" frame_rate="30.0" max_range="10.0">
        <origin xyz="0.015 0.055 0.0065" rpy="0 0 0" />
      </xacro:realsense_depth_macro>
    </xacro:if>

    <!-- Groundtruth -->
    <xacro:if value="${enable_ground_truth}">
      <!-- Odometry Sensor -->
      <xacro:realsense_odometry_plugin_macro
        namespace="${namespace}/ground_truth"
        odometry_sensor_suffix=""
        parent_link="${namespace}/realsense_camera_link"
        pose_topic="pose"
        pose_with_covariance_topic="pose_with_covariance"
        position_topic="position"
        transform_topic="transform"
        odometry_topic="odometry"
        parent_frame_id="world"
        child_frame_id="${namespace}/base_link"
        mass_odometry_sensor="0.00001"
        measurement_divisor="1"
        measurement_delay="0"
        unknown_delay="0.0"
        noise_normal_position="0 0 0"
        noise_normal_quaternion="0 0 0"
        noise_normal_linear_velocity="0 0 0"
        noise_normal_angular_velocity="0 0 0"
        noise_uniform_position="0 0 0"
        noise_uniform_quaternion="0 0 0"
        noise_uniform_linear_velocity="0 0 0"
        noise_uniform_angular_velocity="0 0 0"
        enable_odometry_map="false"
        odometry_map=""
        image_scale="">
        <inertia ixx="0.00001" ixy="0.0" ixz="0.0" iyy="0.00001" iyz="0.0" izz="0.00001" /> <!-- [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] [kg m^2] -->
        <origin xyz="0.0 0.0 0.0" rpy="0.0 0.0 0.0" />
      </xacro:realsense_odometry_plugin_macro>
    </xacro:if>

 </xacro:macro>
</robot>
